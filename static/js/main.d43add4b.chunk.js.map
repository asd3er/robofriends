{"version":3,"sources":["components/Card.js","components/cardlist.js","Robots.js","components/Searchbox.js","components/scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","Cardlist","Robots","map","user","i","key","username","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onsearchChange","event","setState","Searchfield","target","value","state","filteredrobots","this","filter","Robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAaeA,EAXF,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,MACxB,OACC,yBAAKC,UAAU,oDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,cACrB,6BACC,4BAAKD,GACL,2BAAIC,MCYOI,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,6BAECA,EAAOC,IAAI,SAACC,EAAMC,GACjB,OAAO,kBAAC,EAAD,CACNC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,YCZTK,EAAS,CACrB,CACCP,GAAI,EACJC,KAAM,aACNW,SAAU,oBACVV,MAAO,wBAER,CACCF,GAAI,EACJC,KAAM,gBACNW,SAAU,uBACVV,MAAO,2BAER,CACCF,GAAI,EACJC,KAAM,cACNW,SAAU,qBACVV,MAAO,yBAER,CACCF,GAAI,EACJC,KAAM,aACNW,SAAU,oBACVV,MAAO,wBAER,CACCF,GAAI,EACJC,KAAM,YACNW,SAAU,mBACVV,MAAO,uBAER,CACCF,GAAI,EACJC,KAAM,gBACNW,SAAU,uBACVV,MAAO,4BCtBMW,EAXG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACE,yBAAKX,UAAU,OACd,2BACAA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCACI,G,MAPA,SAACC,GACf,OACC,yBAAKC,MAAO,CAAEC,SAAS,SAAUC,OAAO,kBAAmBC,OAAO,UAChEJ,EAAMK,YC0CKC,E,YA9Bd,aAAc,IAAD,8BACZ,+CAODC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEC,YAAYF,EAAMG,OAAOC,SAPzC,EAAKC,MAAQ,CACZzB,OAAOA,EACPsB,YAAY,IAJD,E,sEAaH,IAAD,OACFI,EAAiBC,KAAKF,MAAMzB,OAAO4B,OAAO,SAAAC,GAC/C,OAAOA,EAAMnC,KAAKoC,cAAcC,SAAS,EAAKN,MAAMH,YAAYQ,iBAEjE,OACC,yBAAKlC,UAAU,MACd,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWW,aAAcoB,KAAKR,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUnB,OAAQ0B,U,GAvBLM,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDyH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.d43add4b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name, email}) =>{\r\n\treturn (\r\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src ={`https://robohash.org/${email}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst Cardlist = ({ Robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\tRobots.map((user, i) => {\r\n\t\t\t\treturn <Card \r\n\t\t\t\t\tkey={i}\r\n\t\t\t\t\tid={Robots[i].id} \r\n\t\t\t\t\tname={Robots[i].name} \r\n\t\t\t\t\temail={Robots[i].email}/>\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n\t\r\n\r\n}\r\nexport default Cardlist;","export const Robots = [\r\n\t{\r\n\t\tid: 1,\r\n\t\tname: \"Dengkui Li\",\r\n\t\tusername: \"lidengkuizuishuai\",\r\n\t\temail: \"dengkui.li@gmail.com\"\r\n\t},\r\n\t{\r\n\t\tid: 2,\r\n\t\tname: \"Hongpei Huang\",\r\n\t\tusername: \"Hongpeihuangzuishuai\",\r\n\t\temail: \"hongpei.huang@gmail.com\"\r\n\t},\r\n\t{\r\n\t\tid: 3,\r\n\t\tname: \"Yuchen Zhou\",\r\n\t\tusername: \"Yuchenzhouzuishuai\",\r\n\t\temail: \"yuchen.zhou@gmail.com\"\r\n\t},\r\n\t{\r\n\t\tid: 4,\r\n\t\tname: \"Yaoqing He\",\r\n\t\tusername: \"Yaoqinghezuishuai\",\r\n\t\temail: \"yaoqing.he@gmail.com\"\r\n\t},\r\n\t{\r\n\t\tid: 5,\r\n\t\tname: \"Jianan Li\",\r\n\t\tusername: \"Jiananlizuishuai\",\r\n\t\temail: \"jianan.li@gmail.com\"\r\n\t},\r\n\t{\r\n\t\tid: 6,\r\n\t\tname: \"ruocheng wang\",\r\n\t\tusername: \"ruochengwangzuishuai\",\r\n\t\temail: \"ruocheng.wang@gmail.com\"\r\n\t}\r\n]\r\n","import React from 'react'\r\n\r\nconst Searchbox = ({searchChange}) => {\r\n\treturn (\r\n\t\t\t<div className='pa2'>\r\n\t\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='Search robots'\r\n\t\t\t\tonChange={searchChange}/>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\nexport default Searchbox","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{ overflow:'scroll', border:'5px solid black', height:'800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Scroll","import React, { Component } from 'react'\r\nimport Cardlist from '../components/cardlist'\r\nimport {Robots} from '../Robots'\r\nimport Searchbox from '../components/Searchbox'\r\nimport './App.css'\r\nimport Scroll from '../components/scroll'\r\n/*const App = () => {\r\n\treturn (\r\n\t\t<div className='tc'>\r\n\t\t\t<h1>Robo friends</h1>\r\n\t\t\t<Searchbox/>\r\n\t\t\t<Cardlist Robots={Robots}/>\r\n\t\t</div>\r\n\t\t);\r\n}*/\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tRobots:Robots,\r\n\t\t\tSearchfield:''\r\n\t\t}\r\n\t}\r\n\r\n\tonsearchChange = (event) => {\r\n\t\tthis.setState({ Searchfield:event.target.value })\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tconst filteredrobots = this.state.Robots.filter(Robot => {\r\n\t\t\treturn Robot.name.toLowerCase().includes(this.state.Searchfield.toLowerCase())\r\n\t\t})\r\n\t\treturn (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f2'>Robo friends</h1>\r\n\t\t\t\t<Searchbox searchChange={this.onsearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<Cardlist Robots={filteredrobots}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}